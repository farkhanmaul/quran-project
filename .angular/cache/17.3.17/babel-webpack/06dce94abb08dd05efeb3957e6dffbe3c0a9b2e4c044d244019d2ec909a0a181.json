{"ast":null,"code":"import _asyncToGenerator from \"D:/Personal Project/4 quran/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let OfflineService = /*#__PURE__*/(() => {\n  class OfflineService {\n    constructor() {\n      this.onlineSubject = new BehaviorSubject(navigator.onLine);\n      this.online$ = this.onlineSubject.asObservable();\n      window.addEventListener('online', () => {\n        console.log('App is online');\n        this.onlineSubject.next(true);\n      });\n      window.addEventListener('offline', () => {\n        console.log('App is offline');\n        this.onlineSubject.next(false);\n      });\n      // Register service worker\n      this.registerServiceWorker();\n    }\n    get isOnline() {\n      return this.onlineSubject.value;\n    }\n    registerServiceWorker() {\n      return _asyncToGenerator(function* () {\n        if ('serviceWorker' in navigator) {\n          try {\n            const registration = yield navigator.serviceWorker.register('/sw.js');\n            console.log('ServiceWorker registration successful:', registration);\n          } catch (error) {\n            console.log('ServiceWorker registration failed:', error);\n          }\n        }\n      })();\n    }\n    // Download specific surah for offline use\n    downloadSurah(surahNumber) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        if (!_this.isOnline) {\n          return false;\n        }\n        try {\n          const arabicUrl = `https://cdn.jsdelivr.net/gh/fawazahmed0/quran-api@1/editions/ara-quranacademy/${surahNumber}.json`;\n          const indonesianUrl = `https://cdn.jsdelivr.net/gh/fawazahmed0/quran-api@1/editions/ind-indonesianislam/${surahNumber}.json`;\n          const cache = yield caches.open('quran-app-v1');\n          // Fetch and cache both Arabic and Indonesian versions\n          yield Promise.all([cache.add(arabicUrl), cache.add(indonesianUrl)]);\n          // Store downloaded surahs list\n          const downloadedSurahs = _this.getDownloadedSurahs();\n          if (!downloadedSurahs.includes(surahNumber)) {\n            downloadedSurahs.push(surahNumber);\n            localStorage.setItem('offline-surahs', JSON.stringify(downloadedSurahs));\n          }\n          return true;\n        } catch (error) {\n          console.error('Failed to download surah:', error);\n          return false;\n        }\n      })();\n    }\n    // Get list of downloaded surahs\n    getDownloadedSurahs() {\n      const stored = localStorage.getItem('offline-surahs');\n      return stored ? JSON.parse(stored) : [];\n    }\n    // Remove surah from offline storage\n    removeSurah(surahNumber) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const cache = yield caches.open('quran-app-v1');\n          const arabicUrl = `https://cdn.jsdelivr.net/gh/fawazahmed0/quran-api@1/editions/ara-quranacademy/${surahNumber}.json`;\n          const indonesianUrl = `https://cdn.jsdelivr.net/gh/fawazahmed0/quran-api@1/editions/ind-indonesianislam/${surahNumber}.json`;\n          yield Promise.all([cache.delete(arabicUrl), cache.delete(indonesianUrl)]);\n          // Update downloaded surahs list\n          const downloadedSurahs = _this2.getDownloadedSurahs();\n          const index = downloadedSurahs.indexOf(surahNumber);\n          if (index > -1) {\n            downloadedSurahs.splice(index, 1);\n            localStorage.setItem('offline-surahs', JSON.stringify(downloadedSurahs));\n          }\n          return true;\n        } catch (error) {\n          console.error('Failed to remove surah:', error);\n          return false;\n        }\n      })();\n    }\n    // Get storage usage estimate\n    getStorageUsage() {\n      return _asyncToGenerator(function* () {\n        if ('storage' in navigator && 'estimate' in navigator.storage) {\n          try {\n            const estimate = yield navigator.storage.estimate();\n            return {\n              used: estimate.usage || 0,\n              quota: estimate.quota || 0\n            };\n          } catch (error) {\n            console.error('Failed to get storage estimate:', error);\n          }\n        }\n        return null;\n      })();\n    }\n    static {\n      this.ɵfac = function OfflineService_Factory(t) {\n        return new (t || OfflineService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: OfflineService,\n        factory: OfflineService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return OfflineService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}